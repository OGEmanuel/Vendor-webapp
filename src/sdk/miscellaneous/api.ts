/* tslint:disable */
/* eslint-disable */
/**
 * Miscellaneous Docs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddToWaitListDTO
 */
export interface AddToWaitListDTO {
    /**
     * 
     * @type {string}
     * @memberof AddToWaitListDTO
     */
    'contactName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddToWaitListDTO
     */
    'contactEmail': string;
    /**
     * 
     * @type {string}
     * @memberof AddToWaitListDTO
     */
    'contactPhone'?: string;
    /**
     * tag describing users location
     * @type {string}
     * @memberof AddToWaitListDTO
     */
    'addressTag': string;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'iso_code': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'default_currency_code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Country
     */
    'supported_currency_code': Array<string>;
}
/**
 * 
 * @export
 * @interface MarketTypeDefinition
 */
export interface MarketTypeDefinition {
    /**
     * 
     * @type {string}
     * @memberof MarketTypeDefinition
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MarketTypeDefinition
     */
    'handle': string;
    /**
     * 
     * @type {string}
     * @memberof MarketTypeDefinition
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof MarketTypeDefinition
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof MarketTypeDefinition
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof MarketTypeDefinition
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * Unique identifier for the vendor, automatically generated by MongoDB.
     * @type {string}
     * @memberof Review
     */
    'id': string;
    /**
     * Unique identifier for the review account.
     * @type {object}
     * @memberof Review
     */
    'reviewerId': object;
    /**
     * Unique identifier for resource being reviewed.
     * @type {string}
     * @memberof Review
     */
    'resourceId': string;
    /**
     * Review resource type
     * @type {string}
     * @memberof Review
     */
    'resourceType': string;
    /**
     * Review actual review
     * @type {string}
     * @memberof Review
     */
    'body'?: string;
    /**
     * Rating
     * @type {number}
     * @memberof Review
     */
    'rating'?: number;
    /**
     * Timestamp when the vendor document was created.
     * @type {string}
     * @memberof Review
     */
    'createdAt': string;
    /**
     * Timestamp when the vendor document was last updated.
     * @type {string}
     * @memberof Review
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface State
 */
export interface State {
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof State
     */
    'country_code': string;
}
/**
 * 
 * @export
 * @interface UpsertReviewDTO
 */
export interface UpsertReviewDTO {
    /**
     * Unique identifier for the review account.
     * @type {object}
     * @memberof UpsertReviewDTO
     */
    'reviewerId': object;
    /**
     * Unique identifier for resource being reviewed.
     * @type {string}
     * @memberof UpsertReviewDTO
     */
    'resourceId': string;
    /**
     * Review resource type
     * @type {string}
     * @memberof UpsertReviewDTO
     */
    'resourceType': string;
    /**
     * Review actual review
     * @type {string}
     * @memberof UpsertReviewDTO
     */
    'body'?: string;
    /**
     * Rating
     * @type {number}
     * @memberof UpsertReviewDTO
     */
    'rating'?: number;
}

/**
 * BanksApi - axios parameter creator
 * @export
 */
export const BanksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetBanks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/miscellaneous/bank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BanksApi - functional programming interface
 * @export
 */
export const BanksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BanksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async miscellaneousControllerGetBanks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarketTypeDefinition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.miscellaneousControllerGetBanks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BanksApi.miscellaneousControllerGetBanks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BanksApi - factory interface
 * @export
 */
export const BanksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BanksApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetBanks(options?: any): AxiosPromise<Array<MarketTypeDefinition>> {
            return localVarFp.miscellaneousControllerGetBanks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BanksApi - object-oriented interface
 * @export
 * @class BanksApi
 * @extends {BaseAPI}
 */
export class BanksApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BanksApi
     */
    public miscellaneousControllerGetBanks(options?: RawAxiosRequestConfig) {
        return BanksApiFp(this.configuration).miscellaneousControllerGetBanks(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataTypesApi - axios parameter creator
 * @export
 */
export const DataTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetMarketTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/miscellaneous/market-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetProductCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/miscellaneous/product-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataTypesApi - functional programming interface
 * @export
 */
export const DataTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async miscellaneousControllerGetMarketTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarketTypeDefinition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.miscellaneousControllerGetMarketTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataTypesApi.miscellaneousControllerGetMarketTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async miscellaneousControllerGetProductCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarketTypeDefinition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.miscellaneousControllerGetProductCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataTypesApi.miscellaneousControllerGetProductCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataTypesApi - factory interface
 * @export
 */
export const DataTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataTypesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetMarketTypes(options?: any): AxiosPromise<Array<MarketTypeDefinition>> {
            return localVarFp.miscellaneousControllerGetMarketTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetProductCategories(options?: any): AxiosPromise<Array<MarketTypeDefinition>> {
            return localVarFp.miscellaneousControllerGetProductCategories(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataTypesApi - object-oriented interface
 * @export
 * @class DataTypesApi
 * @extends {BaseAPI}
 */
export class DataTypesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypesApi
     */
    public miscellaneousControllerGetMarketTypes(options?: RawAxiosRequestConfig) {
        return DataTypesApiFp(this.configuration).miscellaneousControllerGetMarketTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataTypesApi
     */
    public miscellaneousControllerGetProductCategories(options?: RawAxiosRequestConfig) {
        return DataTypesApiFp(this.configuration).miscellaneousControllerGetProductCategories(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetCountries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/miscellaneous/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetStates: async (countryCode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('miscellaneousControllerGetStates', 'countryCode', countryCode)
            const localVarPath = `/v1/miscellaneous/states`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async miscellaneousControllerGetCountries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Country>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.miscellaneousControllerGetCountries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.miscellaneousControllerGetCountries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async miscellaneousControllerGetStates(countryCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<State>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.miscellaneousControllerGetStates(countryCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.miscellaneousControllerGetStates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetCountries(options?: any): AxiosPromise<Array<Country>> {
            return localVarFp.miscellaneousControllerGetCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerGetStates(countryCode: string, options?: any): AxiosPromise<Array<State>> {
            return localVarFp.miscellaneousControllerGetStates(countryCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public miscellaneousControllerGetCountries(options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).miscellaneousControllerGetCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} countryCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public miscellaneousControllerGetStates(countryCode: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).miscellaneousControllerGetStates(countryCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewControllerGetResourceReview: async (resourceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('reviewControllerGetResourceReview', 'resourceId', resourceId)
            const localVarPath = `/v1/miscellaneous/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resourceId !== undefined) {
                localVarQueryParameter['resourceId'] = resourceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewControllerGetVendorCredentials: async (reviewId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('reviewControllerGetVendorCredentials', 'reviewId', reviewId)
            const localVarPath = `/v1/miscellaneous/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (reviewId !== undefined) {
                localVarQueryParameter['reviewId'] = reviewId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertReviewDTO} upsertReviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewControllerUpsertReview: async (upsertReviewDTO: UpsertReviewDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertReviewDTO' is not null or undefined
            assertParamExists('reviewControllerUpsertReview', 'upsertReviewDTO', upsertReviewDTO)
            const localVarPath = `/v1/miscellaneous/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertReviewDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewControllerGetResourceReview(resourceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewControllerGetResourceReview(resourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.reviewControllerGetResourceReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewControllerGetVendorCredentials(reviewId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewControllerGetVendorCredentials(reviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.reviewControllerGetVendorCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertReviewDTO} upsertReviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewControllerUpsertReview(upsertReviewDTO: UpsertReviewDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewControllerUpsertReview(upsertReviewDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.reviewControllerUpsertReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewApiFp(configuration)
    return {
        /**
         * 
         * @param {string} resourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewControllerGetResourceReview(resourceId: string, options?: any): AxiosPromise<Review> {
            return localVarFp.reviewControllerGetResourceReview(resourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewControllerGetVendorCredentials(reviewId: string, options?: any): AxiosPromise<Review> {
            return localVarFp.reviewControllerGetVendorCredentials(reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertReviewDTO} upsertReviewDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewControllerUpsertReview(upsertReviewDTO: UpsertReviewDTO, options?: any): AxiosPromise<Review> {
            return localVarFp.reviewControllerUpsertReview(upsertReviewDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
    /**
     * 
     * @param {string} resourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public reviewControllerGetResourceReview(resourceId: string, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).reviewControllerGetResourceReview(resourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public reviewControllerGetVendorCredentials(reviewId: string, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).reviewControllerGetVendorCredentials(reviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertReviewDTO} upsertReviewDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public reviewControllerUpsertReview(upsertReviewDTO: UpsertReviewDTO, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).reviewControllerUpsertReview(upsertReviewDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload a file without transformations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUploadControllerUploadFile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/miscellaneous/upload/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload an image with optional resizing
         * @param {number} [width] Width for image resizing
         * @param {number} [height] Height for image resizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUploadControllerUploadImage: async (width?: number, height?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/miscellaneous/upload/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload a file without transformations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageUploadControllerUploadFile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageUploadControllerUploadFile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.imageUploadControllerUploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload an image with optional resizing
         * @param {number} [width] Width for image resizing
         * @param {number} [height] Height for image resizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async imageUploadControllerUploadImage(width?: number, height?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.imageUploadControllerUploadImage(width, height, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadApi.imageUploadControllerUploadImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload a file without transformations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUploadControllerUploadFile(options?: any): AxiosPromise<any> {
            return localVarFp.imageUploadControllerUploadFile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload an image with optional resizing
         * @param {number} [width] Width for image resizing
         * @param {number} [height] Height for image resizing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageUploadControllerUploadImage(width?: number, height?: number, options?: any): AxiosPromise<any> {
            return localVarFp.imageUploadControllerUploadImage(width, height, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadApi - object-oriented interface
 * @export
 * @class UploadApi
 * @extends {BaseAPI}
 */
export class UploadApi extends BaseAPI {
    /**
     * 
     * @summary Upload a file without transformations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public imageUploadControllerUploadFile(options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).imageUploadControllerUploadFile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload an image with optional resizing
     * @param {number} [width] Width for image resizing
     * @param {number} [height] Height for image resizing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApi
     */
    public imageUploadControllerUploadImage(width?: number, height?: number, options?: RawAxiosRequestConfig) {
        return UploadApiFp(this.configuration).imageUploadControllerUploadImage(width, height, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WaitlistApi - axios parameter creator
 * @export
 */
export const WaitlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddToWaitListDTO} addToWaitListDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerAddToWaitList: async (addToWaitListDTO: AddToWaitListDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addToWaitListDTO' is not null or undefined
            assertParamExists('miscellaneousControllerAddToWaitList', 'addToWaitListDTO', addToWaitListDTO)
            const localVarPath = `/v1/miscellaneous/waitlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addToWaitListDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WaitlistApi - functional programming interface
 * @export
 */
export const WaitlistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WaitlistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddToWaitListDTO} addToWaitListDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async miscellaneousControllerAddToWaitList(addToWaitListDTO: AddToWaitListDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.miscellaneousControllerAddToWaitList(addToWaitListDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WaitlistApi.miscellaneousControllerAddToWaitList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WaitlistApi - factory interface
 * @export
 */
export const WaitlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WaitlistApiFp(configuration)
    return {
        /**
         * 
         * @param {AddToWaitListDTO} addToWaitListDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miscellaneousControllerAddToWaitList(addToWaitListDTO: AddToWaitListDTO, options?: any): AxiosPromise<Country> {
            return localVarFp.miscellaneousControllerAddToWaitList(addToWaitListDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WaitlistApi - object-oriented interface
 * @export
 * @class WaitlistApi
 * @extends {BaseAPI}
 */
export class WaitlistApi extends BaseAPI {
    /**
     * 
     * @param {AddToWaitListDTO} addToWaitListDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaitlistApi
     */
    public miscellaneousControllerAddToWaitList(addToWaitListDTO: AddToWaitListDTO, options?: RawAxiosRequestConfig) {
        return WaitlistApiFp(this.configuration).miscellaneousControllerAddToWaitList(addToWaitListDTO, options).then((request) => request(this.axios, this.basePath));
    }
}




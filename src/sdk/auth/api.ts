/* tslint:disable */
/* eslint-disable */
/**
 * Auth Docs
 * Authentication endpoints...
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountPublicDto
 */
export interface AccountPublicDto {
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'emailActivated': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'profilePhoto': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'bio': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'phoneActivated': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AccountPublicDto
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface CreateAccountDTO
 */
export interface CreateAccountDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountDTO
     */
    'referralCode': string;
}
/**
 * 
 * @export
 * @interface DeleteAccountDTO
 */
export interface DeleteAccountDTO {
    /**
     * 
     * @type {string}
     * @memberof DeleteAccountDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDTO
 */
export interface ForgotPasswordDTO {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordOTPDTO
 */
export interface ForgotPasswordOTPDTO {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordOTPDTO
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordDTO
 */
export interface ResetPasswordDTO {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDTO
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDTO
     */
    'passwordResetToken': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDTO
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordOTPAuthorizationDTO
 */
export interface ResetPasswordOTPAuthorizationDTO {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordOTPAuthorizationDTO
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordOTPAuthorizationDTO
     */
    'passwordResetCode': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordOTPAuthorizationResPayload
 */
export interface ResetPasswordOTPAuthorizationResPayload {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordOTPAuthorizationResPayload
     */
    'passwordResetToken': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordOTPAuthorizationResPayload
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface SendEmailVerificationCredDTO
 */
export interface SendEmailVerificationCredDTO {
    /**
     * 
     * @type {string}
     * @memberof SendEmailVerificationCredDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SendEmailVerificationCredDTO
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface SigninDTO
 */
export interface SigninDTO {
    /**
     * 
     * @type {string}
     * @memberof SigninDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SigninDTO
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof SigninDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface SigninOTPDTO
 */
export interface SigninOTPDTO {
    /**
     * 
     * @type {string}
     * @memberof SigninOTPDTO
     */
    'temporalAccessToken': string;
    /**
     * 
     * @type {string}
     * @memberof SigninOTPDTO
     */
    'otp': string;
}
/**
 * 
 * @export
 * @interface SigninResponsePayload
 */
export interface SigninResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof SigninResponsePayload
     */
    'token': string;
    /**
     * 
     * @type {boolean}
     * @memberof SigninResponsePayload
     */
    'requiresOTPToLogin'?: boolean;
}
/**
 * 
 * @export
 * @interface SigninWithOTPResponsePayload
 */
export interface SigninWithOTPResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof SigninWithOTPResponsePayload
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface SignupResponsePayload
 */
export interface SignupResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof SignupResponsePayload
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface UpdateAccountDTO
 */
export interface UpdateAccountDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountDTO
     */
    'profilePhoto'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountDTO
     */
    'bio'?: string;
}
/**
 * 
 * @export
 * @interface UpdateAccountPasswordDTO
 */
export interface UpdateAccountPasswordDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountPasswordDTO
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccountPasswordDTO
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface VerificationEmailDTO
 */
export interface VerificationEmailDTO {
    /**
     * 
     * @type {string}
     * @memberof VerificationEmailDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof VerificationEmailDTO
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof VerificationEmailDTO
     */
    'emailActivationToken': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SigninDTO} signinDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignin: async (signinDTO: SigninDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinDTO' is not null or undefined
            assertParamExists('authControllerSignin', 'signinDTO', signinDTO)
            const localVarPath = `/v1/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SigninOTPDTO} signinOTPDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninWIthOtp: async (signinOTPDTO: SigninOTPDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signinOTPDTO' is not null or undefined
            assertParamExists('authControllerSigninWIthOtp', 'signinOTPDTO', signinOTPDTO)
            const localVarPath = `/v1/auth/signin-with-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signinOTPDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAccountDTO} createAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignup: async (createAccountDTO: CreateAccountDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAccountDTO' is not null or undefined
            assertParamExists('authControllerSignup', 'createAccountDTO', createAccountDTO)
            const localVarPath = `/v1/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SigninDTO} signinDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignin(signinDTO: SigninDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignin(signinDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SigninOTPDTO} signinOTPDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSigninWIthOtp(signinOTPDTO: SigninOTPDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigninWithOTPResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSigninWIthOtp(signinOTPDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSigninWIthOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAccountDTO} createAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignup(createAccountDTO: CreateAccountDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponsePayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignup(createAccountDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {SigninDTO} signinDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignin(signinDTO: SigninDTO, options?: any): AxiosPromise<SigninResponsePayload> {
            return localVarFp.authControllerSignin(signinDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SigninOTPDTO} signinOTPDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSigninWIthOtp(signinOTPDTO: SigninOTPDTO, options?: any): AxiosPromise<SigninWithOTPResponsePayload> {
            return localVarFp.authControllerSigninWIthOtp(signinOTPDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAccountDTO} createAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignup(createAccountDTO: CreateAccountDTO, options?: any): AxiosPromise<SignupResponsePayload> {
            return localVarFp.authControllerSignup(createAccountDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {SigninDTO} signinDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignin(signinDTO: SigninDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignin(signinDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SigninOTPDTO} signinOTPDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSigninWIthOtp(signinOTPDTO: SigninOTPDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSigninWIthOtp(signinOTPDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAccountDTO} createAccountDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignup(createAccountDTO: CreateAccountDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignup(createAccountDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MeApi - axios parameter creator
 * @export
 */
export const MeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteAccountDTO} deleteAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerDeleteMyAccount: async (deleteAccountDTO: DeleteAccountDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteAccountDTO' is not null or undefined
            assertParamExists('accountControllerDeleteMyAccount', 'deleteAccountDTO', deleteAccountDTO)
            const localVarPath = `/v1/account/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteAccountDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGetMyProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/account/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAccountDTO} updateAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerUpdateAccount: async (updateAccountDTO: UpdateAccountDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAccountDTO' is not null or undefined
            assertParamExists('accountControllerUpdateAccount', 'updateAccountDTO', updateAccountDTO)
            const localVarPath = `/v1/account/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAccountPasswordDTO} updateAccountPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerUpdatePassword: async (updateAccountPasswordDTO: UpdateAccountPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAccountPasswordDTO' is not null or undefined
            assertParamExists('accountControllerUpdatePassword', 'updateAccountPasswordDTO', updateAccountPasswordDTO)
            const localVarPath = `/v1/account/me/update-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteAccountDTO} deleteAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerDeleteMyAccount(deleteAccountDTO: DeleteAccountDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerDeleteMyAccount(deleteAccountDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.accountControllerDeleteMyAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerGetMyProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountPublicDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerGetMyProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.accountControllerGetMyProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateAccountDTO} updateAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerUpdateAccount(updateAccountDTO: UpdateAccountDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerUpdateAccount(updateAccountDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.accountControllerUpdateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateAccountPasswordDTO} updateAccountPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerUpdatePassword(updateAccountPasswordDTO: UpdateAccountPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerUpdatePassword(updateAccountPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MeApi.accountControllerUpdatePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteAccountDTO} deleteAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerDeleteMyAccount(deleteAccountDTO: DeleteAccountDTO, options?: any): AxiosPromise<void> {
            return localVarFp.accountControllerDeleteMyAccount(deleteAccountDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGetMyProfile(options?: any): AxiosPromise<AccountPublicDto> {
            return localVarFp.accountControllerGetMyProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAccountDTO} updateAccountDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerUpdateAccount(updateAccountDTO: UpdateAccountDTO, options?: any): AxiosPromise<void> {
            return localVarFp.accountControllerUpdateAccount(updateAccountDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateAccountPasswordDTO} updateAccountPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerUpdatePassword(updateAccountPasswordDTO: UpdateAccountPasswordDTO, options?: any): AxiosPromise<void> {
            return localVarFp.accountControllerUpdatePassword(updateAccountPasswordDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI {
    /**
     * 
     * @param {DeleteAccountDTO} deleteAccountDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public accountControllerDeleteMyAccount(deleteAccountDTO: DeleteAccountDTO, options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).accountControllerDeleteMyAccount(deleteAccountDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public accountControllerGetMyProfile(options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).accountControllerGetMyProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateAccountDTO} updateAccountDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public accountControllerUpdateAccount(updateAccountDTO: UpdateAccountDTO, options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).accountControllerUpdateAccount(updateAccountDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateAccountPasswordDTO} updateAccountPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    public accountControllerUpdatePassword(updateAccountPasswordDTO: UpdateAccountPasswordDTO, options?: RawAxiosRequestConfig) {
        return MeApiFp(this.configuration).accountControllerUpdatePassword(updateAccountPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PasswordApi - axios parameter creator
 * @export
 */
export const PasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: async (forgotPasswordDTO: ForgotPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDTO' is not null or undefined
            assertParamExists('authControllerForgotPassword', 'forgotPasswordDTO', forgotPasswordDTO)
            const localVarPath = `/v1/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordOTPDTO} forgotPasswordOTPDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPasswordOTPReset: async (forgotPasswordOTPDTO: ForgotPasswordOTPDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordOTPDTO' is not null or undefined
            assertParamExists('authControllerForgotPasswordOTPReset', 'forgotPasswordOTPDTO', forgotPasswordOTPDTO)
            const localVarPath = `/v1/auth/forgot-password-otp-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordOTPDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword: async (resetPasswordDTO: ResetPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDTO' is not null or undefined
            assertParamExists('authControllerResetPassword', 'resetPasswordDTO', resetPasswordDTO)
            const localVarPath = `/v1/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordOTPAuthorizationDTO} resetPasswordOTPAuthorizationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPasswordOTPAuthorization: async (resetPasswordOTPAuthorizationDTO: ResetPasswordOTPAuthorizationDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordOTPAuthorizationDTO' is not null or undefined
            assertParamExists('authControllerResetPasswordOTPAuthorization', 'resetPasswordOTPAuthorizationDTO', resetPasswordOTPAuthorizationDTO)
            const localVarPath = `/v1/auth/reset-password-otp-auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordOTPAuthorizationDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordApi - functional programming interface
 * @export
 */
export const PasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPassword(forgotPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerForgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ForgotPasswordOTPDTO} forgotPasswordOTPDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPasswordOTPReset(forgotPasswordOTPDTO: ForgotPasswordOTPDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPasswordOTPReset(forgotPasswordOTPDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerForgotPasswordOTPReset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(resetPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordOTPAuthorizationDTO} resetPasswordOTPAuthorizationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPasswordOTPAuthorization(resetPasswordOTPAuthorizationDTO: ResetPasswordOTPAuthorizationDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetPasswordOTPAuthorizationResPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPasswordOTPAuthorization(resetPasswordOTPAuthorizationDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PasswordApi.authControllerResetPasswordOTPAuthorization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PasswordApi - factory interface
 * @export
 */
export const PasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerForgotPassword(forgotPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordOTPDTO} forgotPasswordOTPDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPasswordOTPReset(forgotPasswordOTPDTO: ForgotPasswordOTPDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerForgotPasswordOTPReset(forgotPasswordOTPDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDTO} resetPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerResetPassword(resetPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordOTPAuthorizationDTO} resetPasswordOTPAuthorizationDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPasswordOTPAuthorization(resetPasswordOTPAuthorizationDTO: ResetPasswordOTPAuthorizationDTO, options?: any): AxiosPromise<ResetPasswordOTPAuthorizationResPayload> {
            return localVarFp.authControllerResetPasswordOTPAuthorization(resetPasswordOTPAuthorizationDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PasswordApi - object-oriented interface
 * @export
 * @class PasswordApi
 * @extends {BaseAPI}
 */
export class PasswordApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordDTO} forgotPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerForgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerForgotPassword(forgotPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordOTPDTO} forgotPasswordOTPDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerForgotPasswordOTPReset(forgotPasswordOTPDTO: ForgotPasswordOTPDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerForgotPasswordOTPReset(forgotPasswordOTPDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordDTO} resetPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerResetPassword(resetPasswordDTO: ResetPasswordDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerResetPassword(resetPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordOTPAuthorizationDTO} resetPasswordOTPAuthorizationDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordApi
     */
    public authControllerResetPasswordOTPAuthorization(resetPasswordOTPAuthorizationDTO: ResetPasswordOTPAuthorizationDTO, options?: RawAxiosRequestConfig) {
        return PasswordApiFp(this.configuration).authControllerResetPasswordOTPAuthorization(resetPasswordOTPAuthorizationDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VerificationsApi - axios parameter creator
 * @export
 */
export const VerificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VerificationEmailDTO} verificationEmailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCompleteEmailVerification: async (verificationEmailDTO: VerificationEmailDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationEmailDTO' is not null or undefined
            assertParamExists('authControllerCompleteEmailVerification', 'verificationEmailDTO', verificationEmailDTO)
            const localVarPath = `/v1/auth/complete-email-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verificationEmailDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendEmailVerificationCredDTO} sendEmailVerificationCredDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSendEmailVerification: async (sendEmailVerificationCredDTO: SendEmailVerificationCredDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailVerificationCredDTO' is not null or undefined
            assertParamExists('authControllerSendEmailVerification', 'sendEmailVerificationCredDTO', sendEmailVerificationCredDTO)
            const localVarPath = `/v1/auth/send-email-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailVerificationCredDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationsApi - functional programming interface
 * @export
 */
export const VerificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {VerificationEmailDTO} verificationEmailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCompleteEmailVerification(verificationEmailDTO: VerificationEmailDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCompleteEmailVerification(verificationEmailDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationsApi.authControllerCompleteEmailVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SendEmailVerificationCredDTO} sendEmailVerificationCredDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSendEmailVerification(sendEmailVerificationCredDTO: SendEmailVerificationCredDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSendEmailVerification(sendEmailVerificationCredDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VerificationsApi.authControllerSendEmailVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VerificationsApi - factory interface
 * @export
 */
export const VerificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationsApiFp(configuration)
    return {
        /**
         * 
         * @param {VerificationEmailDTO} verificationEmailDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCompleteEmailVerification(verificationEmailDTO: VerificationEmailDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerCompleteEmailVerification(verificationEmailDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendEmailVerificationCredDTO} sendEmailVerificationCredDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSendEmailVerification(sendEmailVerificationCredDTO: SendEmailVerificationCredDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerSendEmailVerification(sendEmailVerificationCredDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationsApi - object-oriented interface
 * @export
 * @class VerificationsApi
 * @extends {BaseAPI}
 */
export class VerificationsApi extends BaseAPI {
    /**
     * 
     * @param {VerificationEmailDTO} verificationEmailDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApi
     */
    public authControllerCompleteEmailVerification(verificationEmailDTO: VerificationEmailDTO, options?: RawAxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).authControllerCompleteEmailVerification(verificationEmailDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendEmailVerificationCredDTO} sendEmailVerificationCredDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationsApi
     */
    public authControllerSendEmailVerification(sendEmailVerificationCredDTO: SendEmailVerificationCredDTO, options?: RawAxiosRequestConfig) {
        return VerificationsApiFp(this.configuration).authControllerSendEmailVerification(sendEmailVerificationCredDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



